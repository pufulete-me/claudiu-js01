
// declaration of variables, miscelaneous
let words = ['pompous', 'harbour', 'colour', 'strange', 'cascade', 'literature', 'platitude', 'xylophone', 'platypus'];
let randomNumber;

// generates a random number used to choose the word from the array
let randomNumberGenerator = () => {
  randomNumber = Math.floor(Math.random() * words.length);
};
randomNumberGenerator();

let tries = 5;
let word = words[randomNumber];
let guessedLetters = [];
let gameEnded = false;
let wordGuessed = false;
let keyboard = document.querySelector('.keyboard');
let container = document.querySelector('#js-resetGameContainer');

// button controls creation

let resetText = 'Reset Game';
let tryAgainText = 'Try the same word Again';
let easierText = 'Make it easier';
let harderText = 'Make it harder';

let buttonHanger = document.getElementById("span-child");
let parentElement = buttonHanger.parentNode;

let resetButton = document.createElement('button');
let tryAgainButton = document.createElement('button');
let makeItEasierButton = document.createElement('button');
let makeItHarderButton = document.createElement('button');


tryAgainButton.innerText = tryAgainText;
resetButton.innerText = resetText;
makeItEasierButton.innerText = easierText;
makeItHarderButton.innerText = harderText;

resetButton.classList.add('btn', 'btn-lg', 'btn-danger', 'mx-4');
tryAgainButton.classList.add('btn', 'btn-lg', 'btn-info', 'mx-4');
makeItEasierButton.classList.add('btn', 'btn-lg', 'btn-warning', 'mx-4');
makeItHarderButton.classList.add('btn', 'btn-lg', 'btn-dark', 'mx-4');

parentElement.insertBefore(resetButton, buttonHanger);
parentElement.insertBefore(tryAgainButton, buttonHanger);
parentElement.insertBefore(makeItEasierButton, buttonHanger);
parentElement.insertBefore(makeItHarderButton, buttonHanger);

// function declarations

// number of tries displayed next to the name of the game
let renderTries = () => {   
  let triesElement = document.getElementById('js-tries');

  triesElement.innerHTML = tries;
};

// reloads same game stats
let reloadGame = () => { 
  
  tries = 5;
  renderTries();

  gameEnded = false;
  wordGuessed = false;

  guessedLetters.length = 0;
  renderWord();

  document.querySelectorAll('[disabled]').forEach((element) => {
    element.disabled = false;
  });

  container.querySelectorAll('.btn-secondary').forEach((element) => {
    element.classList.remove('btn-success');
    element.classList.remove('btn-danger');
  });
};

// resets game, changes word
let resetGame = () => {
  reloadGame();
  randomNumberGenerator();
  word = words[randomNumber];
  renderWord();
  renderTries();
  gameEnded = false;
  wordGuessed = false;
};

// splits the word into an array of letters and makes each letter a revealable button
let renderWord = () => {
  let wordContainerElement = document.getElementById('js-word');
  let successfulIterationCount = 0;
  wordContainerElement.innerHTML = '';

  word.split('').forEach((letter) => {
    let button = document.createElement('button');
    button.classList.add('btn', 'btn-lg', 'btn-secondary', 'm-1');

    if (guessedLetters.includes(letter)) {
      button.innerText = letter;
      successfulIterationCount++;
    }

    wordContainerElement.appendChild(button);
  });

// assigns 'true' to the wordGuessed variable if word has been guessed
  if (successfulIterationCount === word.length) {
    wordGuessed = true;
  }
};

// checks if the game is still running or if it has ended in a win or loss
let checkGameState = () => {
  if (tries === 0) {
    gameEnded = true;
  }

  if (gameEnded && wordGuessed) {
    alert(`Ai castigat, cuvantul era ${word}`);
    resetGame();
  }

  if (wordGuessed) {
    alert(`Ai castigat, cuvantul era ${word}`);
    resetGame();
  }

  if (gameEnded) {
    alert(`Ai pierdut!`);
    return;
  }
};

// renders the purple face of fate
let renderFace = () => {
  let face = document.getElementById('js-face');
  let eyes = face.querySelectorAll('.eye');
  let classNames = '';

  eyes.forEach((eye) => {
    eye.classList.remove('eye--worried', 'eye--annoyed');
  });

  if (tries <= 3 && tries >= 2) {
    classNames += 'eye--annoyed';
  }

  if (tries === 1) {
    classNames += 'eye--worried';
  }

  if (classNames.length < 1) {
    return;
  }

  eyes.forEach((eye) => {
    eye.classList.add(classNames);
  })

}

renderTries();
renderWord();
renderFace();

//button events
keyboard.addEventListener('click', (event) => {
  if (event.target && event.target.nodeName === 'BUTTON') {
    let letter = event.target.innerText.toLowerCase();

    // common actions
    guessedLetters.push(letter);
    event.target.disabled = true;
    makeItEasierButton.disabled = true;
    makeItHarderButton.disabled = true;

    if (word.includes(letter)) {
      event.target.classList.add('btn-success');
    } else {
      tries--;
      event.target.classList.add('btn-danger');
    }
    renderTries();
    renderWord();
    checkGameState();
    renderFace();
 
  }
});

makeItEasierButton.addEventListener('click', () => {
  tries ++;
  renderTries();
});

makeItHarderButton.addEventListener('click', () => {
  tries --;
  renderTries();
});

tryAgainButton.addEventListener('click', reloadGame);

resetButton.addEventListener('click', resetGame);
